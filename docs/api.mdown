PUBLIC API
==========

This section declares the public API of the `spellingbee` module. This should 
not be confused with `autocorrect.py`. `autocorrect.py` has no public API, and
is meant to be run as a script.

Classes
-------

`Corrector`: Class to give spelling suggestions for strings.

###Methods
####Constructor

Construct a new `Corrector` object.

Arguments:

* `wordlist` -- either an already-opened file object or a filename 
as string; the file is a newline separated list of words to 
consider correctly spelled; this is assigned to 
`self.wordlist` (optional, default "words.txt")
* `threshold` -- a number used to determine if a word is good 
enough to be a spelling suggestion; the lesser, the stricter 
the threshold; this is assigned to `self.threshold` (optional, 
default `1`)

Other side effects:

If `wordlist` is a filename, the file will be opened, but not 
closed. YOU MUST CLOSE THE FILE YOURSELF.

####`correct()`

Give spelling suggestions for a string and return a list.

Arguments:

* `string` -- string to correct

Return value:

Returns a list of dictionaries. The keys of the dictionaries are
numbers or None. The values are lists. The keys are the values 
returned by `matchScore()`, the string "nomatch", or `None`; the 
lower the value, the better the match. 

If a key is `None`, that is the only key; that word was spelled 
correctly, and that key's value is a list containing only that 
word.

If a key is "nomatch", that is the only key; no suggestion below 
`self.threshold` was found. That key's value is a list containing 
only the original word.

Otherwise, the lists contain strings -- words that had 
that matchScore.

###Instance variables

* `wordlist` -- A file object representing a list of words to consider 
    correct. YOU MUST CLOSE THIS FILE YOURSELF.
* `threshold` -- A number used to determine if a word is good enough to 
    be a spelling suggestion.
    
Module-level functions
----------------------

###`matchScore()`

Returns the matchScore of two sequences.

Arguments:

`a`, `b` -- Sequences.

Return value:

Returns `(Levenshtein distance between sequences - length of longest common subsequence of sequences) / 2`.